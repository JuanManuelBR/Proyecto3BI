# ==========================================================
# üìä An√°lisis Exploratorio - Estad√≠sticas, Visualizaci√≥n y Correlaci√≥n
# ==========================================================

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# Ruta al archivo limpio
DATA_PATH = Path("data/crypto_dataset_final.csv")

# ==========================================================
# 1Ô∏è‚É£ Cargar los datos
# ==========================================================
print("üì• Cargando datos...")
df = pd.read_csv(DATA_PATH)

# Asegurar que la columna 'Date' est√© en formato datetime
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values('Date')

# ==========================================================
# 2Ô∏è‚É£ Estad√≠sticas descriptivas
# ==========================================================
print("\nüìä Estad√≠sticas Descriptivas:")

# Guardar en CSV
output_dir = Path("output")
output_dir.mkdir(exist_ok=True)

symbol_map = {
    0: "BTC-USD",
    1: "ETH-USD",
    2: "DOGE-USD"
}

# Imprimir estad√≠sticas descriptivas para cada moneda
for symbol_id, symbol_name in symbol_map.items():
    print("\n" + "="*70)
    print(f"üìä ESTAD√çSTICAS DESCRIPTIVAS PARA {symbol_name}")
    print("="*70)
    
    # Filtrar los datos de la moneda
    df_symbol = df[df['symbol_id'] == symbol_id]
    
    # Calcular estad√≠sticas
    stats = df_symbol.describe()
    
    # Mostrar estad√≠sticas
    print(stats)
    
    # Mostrar valores nulos por columna
    print("\nüîç Valores nulos por columna:")
    print(df_symbol.isnull().sum())


# Mostrar valores nulos
print("\nüîç Valores nulos por columna:")

# ==========================================================
# 3Ô∏è‚É£ Visualizaci√≥n de tendencias
# ==========================================================
# Graficar cada s√≠mbolo con su propia l√≠nea
# Obtener lista de s√≠mbolos √∫nicos
symbols = df['symbol_id'].unique()

# Crear una gr√°fica independiente para cada s√≠mbolo
for symbol in symbols:
    data = df[df['symbol_id'] == symbol]

    plt.figure(figsize=(10, 5))
    plt.plot(data['date'], data['close'], label=f'{symbol}', color='blue')
    plt.title(f"Tendencia del Precio de Cierre de {symbol} (2023‚Äì2025)")
    plt.xlabel("Fecha")
    plt.ylabel("Precio (USD)")
    plt.legend()
    plt.tight_layout()
    # Guardar la gr√°fica en la carpeta output
    output_path = f"output/tendencia_{symbol}.png"
    plt.savefig(output_path)
    plt.close()

    print(f"Gr√°fica guardada en: {output_path}")
# ==========================================================
# 4Ô∏è‚É£ Correlaciones
# ==========================================================
print("\nüîó Matriz de Correlaci√≥n:")
corr = df.corr(numeric_only=True)
print(corr)

plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Matriz de Correlaci√≥n entre Variables')
plt.tight_layout()
plt.savefig(output_dir / "matriz_correlacion.png")
plt.show()

print("\n‚úÖ An√°lisis exploratorio completado.")
print(f"üìÇ Resultados guardados en: {output_dir.resolve()}")
